import os
import utils

from langchain_openai import ChatOpenAI
from langchain.chains import ConversationChain
from langchain.memory import ConversationBufferMemory

from langchain.output_parsers import ResponseSchema, StructuredOutputParser
from langchain.prompts import ChatPromptTemplate


class ChatManager:
    def __init__(self):
        self.llm = ChatOpenAI(
            api_key=os.environ['OPENAI_API_KEY'],
            base_url=os.environ["OPENAI_BASE_URL"],
            temperature=0.6
        )

        self.memory = ConversationBufferMemory()
        self.conversation = ConversationChain(
            llm=self.llm,
            memory=self.memory,
            verbose=False
        )
        
        self.set_schema()
        self.set_prompt()
        
        self.user_profile = {
            "gender": "male",
            "age": "young",
            "anamnesis": "was diagnosed with high blood pressure in 2018 and took Locatep to control blood pressure",
            "interest": "",
            "style": ""
        }
        
        self.chat_count = 0
        self.history = []
        
    def set_userProfile(self, user_profile):
        self.user_profile = user_profile

    def set_schema(self):
        self.reference_schema = ResponseSchema(name="extract", description="Reference knowledge that has reference value.(Please be careful not to factor in extraneous content.) Leave it empty if question is not relevant.")
        self.answer_schema = ResponseSchema(name="answer", description="Concise and useful answers based on the user's questions.(Distinguish from reference information)")
        self.interest_schema = ResponseSchema(name="interest", description="What topics or things are users interested in(Labels related to health care and ignore other labels)? List and separate them with commas.")
        self.style_schema = ResponseSchema(name="style", description="What is the user's chat style? Sum it up in one simple word.")
        
        self.response_schemas = [self.reference_schema, self.answer_schema, self.interest_schema, self.style_schema]
        
        self.output_parser = StructuredOutputParser(response_schemas=self.response_schemas)        
        self.format_instructions = self.output_parser.get_format_instructions()

    def set_prompt(self):
        first_template = """\
You are a health knowledge Q&A system, and all questions and answers are in Chinese. For each user query, follow these steps:

1. Extract relevant information from the reference Q&A pairs and knowledge graph query result to ensure the response is accurate.
2. Update the user profile, recording the user's interests and style.
   - Interests: Update based on the topic of the user's question.
   - Style: Update based on the user's tone and expression (e.g., formal or casual).
3. Analyze users' personal information, including gender, age, and medical history.
4. Adjust the response according to the user profile. Ensure the response is related to the user's background without sacrificing accuracy.

Note: 
- Your answer must contain two parts: reference information and new information generated by yourself.
- If the question is not related to health care, do not attempt to answer, simply decline.

Example Process:

User Question: "如何避免糖尿病?"
User Profile: "'age': 'young', 'gender': 'male', 'anamnesis': 'was diagnosed with high blood pressure in 2018 and took Locatep to control blood pressure'"
reference: "Question: 糖尿病患者可以打疫苗吗
Answer: 糖尿病患者如果血糖控制得好，其他情况处于健康状态的话，可以接种疫苗。同时，应注意注射期间有无发热、上呼吸道感染等症状。
糖尿病是一种比较常见的内分泌代谢性疾病。该病发病原因主要是由于胰岛素分泌不足，以及胰升高血糖素不适当地分泌过多所引起。多见于40岁以上喜食甜食而肥胖的病人，城市多于农村，常有家族史，故与遗传有关。少数病人与病毒感染和自身免疫反应有关。主要表现为烦渴、多饮、多尿、多食、乏力、消瘦等症状。生命的常见病，伴发高血压、冠心病、高脂血症等，严重时危及生命。
中医学认为，肝主疏泄，关系人体接收机的升降与调畅，肝气郁滞则气机升降输布紊乱，肝失疏泄则血糖等精微物质不能随清阳之气输布于周身而郁滞于血中，出现高血糖或精微物质的输布紊乱，反见血糖升高，进一步导致血脂、蛋白等其它精微物质紊乱，引起其他合并症，治疗以疏肝调气为主，顺肝条达之性以恢复其生理功能，肝气条达，气机调畅，精微得以输布，糖被利用而血糖自然下降。
另外，因糖尿病的发生和饮食有关，饮食控制的好坏直接影响着治疗的效果。再就是配合运动，注意调摄情志，再适当的配合中药治疗会取得良好的治疗效果。"

Response:
- Extract relevant information: Obtain accurate information about diabetes prevention from the reference Q&A pairs.
- Update user profile:
  - Interest: Diabetes prevention
  - Style: Determine based on the user's query (e.g., formal)
- Adjust the response according to the user profile.

Response: 
- extract: "糖尿病是一种比较常见的内分泌代谢性疾病。该病发病原因主要是由于胰岛素分泌不足，以及胰升高血糖素不适当地分泌过多所引起。多见于40岁以上喜食甜食而肥胖的病人，城市多于农村，常有家族史，故与遗传有关。少数病人与病毒感染和自身免疫反应有关。主要表现为烦渴、多饮、多尿、多食、乏力、消瘦等症状。生命的常见病，伴发高血压、冠心病、高脂血症等，严重时危及生命。
中医学认为，肝主疏泄，关系人体接收机的升降与调畅，肝气郁滞则气机升降输布紊乱，肝失疏泄则血糖等精微物质不能随清阳之气输布于周身而郁滞于血中，出现高血糖或精微物质的输布紊乱，反见血糖升高，进一步导致血脂、蛋白等其它精微物质紊乱，引起其他合并症，治疗以疏肝调气为主，顺肝条达之性以恢复其生理功能，肝气条达，气机调畅，精微得以输布，糖被利用而血糖自然下降。
另外，因糖尿病的发生和饮食有关，饮食控制的好坏直接影响着治疗的效果。再就是配合运动，注意调摄情志，再适当的配合中药治疗会取得良好的治疗效果。"
- answer: "年轻男性曾经得过高血压，可以通过健康饮食、定期运动、维持健康体重、管理压力和定期健康检查来预防糖尿病。这些措施有助于降低糖尿病风险，促进整体健康。"

Note: In each interaction, prioritize accuracy while aligning with the user profile as closely as possible.

Current user profile: {user_profile}
Current user question: {user_question}
Reference knowledge: {reference_knowledge}

{format_instructions}
"""

        self.first_prompt = ChatPromptTemplate.from_template(template=first_template)

        next_template = """\
You are a health knowledge Q&A system, and all questions and answers are in Chinese. For each user query, follow these steps:

1. Extract relevant information from the reference Q&A pairs and knowledge graph query result to ensure the response is accurate.
2. Update the user profile, recording the user's interests and style.
   - Interests: Update based on the topic of the user's question.
   - Style: Update based on the user's tone and expression (e.g., formal or casual).
3. Analyze users' personal information, including gender, age, and medical history.
4. Adjust the response according to the user profile. Ensure the response is related to the user's background without sacrificing accuracy.

Note: 
- Your answer must contain two parts: reference information and new information generated by yourself.
- If the question is not related to health care, do not attempt to answer, simply decline.
- Whenever you refer to a part of the reference knowledge, you must add it to the reference information.

Current user profile: {user_profile}
Current user question: {user_question}
Reference knowledge: {reference_knowledge}

{format_instructions}
"""

        self.next_prompt = ChatPromptTemplate.from_template(template=next_template)

    def chat_one(self, question, reference):
        self.history.append(question)
        prompt = None
        if self.chat_count == 0:
            prompt = self.first_prompt            
        else:
            prompt = self.next_prompt

        messages = prompt.format_messages(user_profile=str(self.user_profile), 
                                          user_question=question, 
                                          reference_knowledge=reference,
                                          format_instructions=self.format_instructions)

        response = self.conversation.predict(input=messages[0].content)
        
        self.chat_count += 1
        output_dict = self.output_parser.parse(response)
        
        # utils.Logger.log("./log/chat.log", str(output_dict))
        
        self.user_profile["interest"] = output_dict["interest"]
        self.user_profile["style"] = output_dict["style"]
        
        return output_dict['extract'], output_dict['answer']
    
    
if __name__ == "__main__":
    utils.setup()
    
    
    
    print("正在连接大模型...")
    chatManager = ChatManager()
    
    reference = """\
Question: 霍乱疫苗是什么
Answer: 霍乱是由霍乱弧菌所致的烈性肠道传染病，夏秋季流行，四季散发，属于甲类传染病。典型的发病急骤，以剧烈的腹泻、呕吐、脱水及肌肉痉挛、循环衰竭伴严重电解质紊乱与酸碱失衡，甚至 引起急性肾功能衰竭等为临床特征，一般以轻症多见，带菌者亦较多，但重症及典型患者其病死率极高。产毒性大肠杆菌（ETEC）是儿童腹泻中最常分离到的细菌，每年导致数亿儿童发生腹泻。世界卫 生组织已将rBS/WC工艺的霍乱疫苗的适应症扩大到预防产毒性大肠杆菌腹泻。ETEC也是导致旅行者腹泻的最主要原因。接种霍乱疫苗是预防霍乱以及产毒性大肠杆菌腹泻的有效手段。
Question: 霍乱疫苗能预防什么疾病
Answer: 霍乱是由霍乱弧菌所致的烈性肠道传染病，夏秋季流行，四季散发，属于甲类传染病。典型的发病急骤，以剧烈的腹泻、呕吐、脱水及肌肉痉挛、循环衰竭伴严重电解质紊乱与酸碱失衡，甚至 引起急性肾功能衰竭等为临床特征，一般以轻症多见，带菌者亦较多，但重症及典型患者其病死率极高。产毒性大肠杆菌（ETEC）是儿童腹泻中最常分离到的细菌，每年导致数亿儿童发生腹泻。世界卫 生组织已将rBS/WC工艺的霍乱疫苗的适应症扩大到预防产毒性大肠杆菌腹泻。ETEC也是导致旅行者腹泻的最主要原因。接种霍乱疫苗是预防霍乱以及产毒性大肠杆菌腹泻的有效手段。
    """

    while True:
        user_question = input("> ")
        if user_question == "quit":
            break
        
        extract, resp = chatManager.chat_one(user_question, reference)
        print(f"question: {user_question}\nanswer:{resp}\nfrom:{extract}")
        print()